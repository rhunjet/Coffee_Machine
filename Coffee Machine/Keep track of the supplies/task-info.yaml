type: edu
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n\n    final public static Scanner sc = new Scanner(System.in);\n\n    public\
    \ static void main(String[] args) {\n        Coffee cupOne = new Coffee(400, 540,\
    \ 120, 9, 550);\n        cupOne.PrintCoffeeMachine();\n        System.out.println(\"\
    Write action (buy, fill, take):\");\n        cupOne.Choice(sc.next());\n     \
    \   cupOne.PrintCoffeeMachine();\n\n    }\n}\n\nclass Coffee{\n    private int\
    \ cups;\n    private final int water = 200;\n    private final int milk = 50;\n\
    \    private final int beans = 15;\n\n    private int maxCups = 0;\n    protected\
    \ int waterRemain;\n    protected int milkRemain;\n    protected int beansRemain;\n\
    \    protected int money;\n\n    public Coffee(int cups){\n        this.cups =\
    \ cups;\n    }\n    public Coffee(int water, int milk, int beans, int cups){\n\
    \        this.waterRemain = water;\n        this.milkRemain = milk;\n        this.beansRemain\
    \ = beans;\n        this.cups = cups;\n    }\n\n    public Coffee(int water, int\
    \ milk, int beans, int cups, int money){\n        this(water, milk, beans, cups);\n\
    \        this.money = money;\n    }\n\n    public void PrintCoffeeMachine(){\n\
    \        System.out.println(String.format(\"\"\"\n                The coffee machine\
    \ has:\n                %d ml of water\n                %d ml of milk\n      \
    \          %d g of coffee beans\n                %d disposable cups\n        \
    \        $%d of money\n                \n                \"\"\", this.waterRemain,\
    \ this.milkRemain, this.beansRemain, this.cups, this.money));\n    }\n\n    public\
    \ void Choice(String choice){\n        Scanner sc = new Scanner(System.in);\n\
    \        switch (choice){\n            case \"buy\" :\n                System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \");\n     \
    \           var coffee = sc.nextInt();\n                switch (coffee){\n   \
    \                 case 1 :\n                        this.waterRemain -= 250;\n\
    \                        this.beansRemain -= 16;\n                        this.money\
    \ += 4;\n                        this.cups--;\n                        break;\n\
    \                    case 2 :\n                        this.waterRemain -= 350;\n\
    \                        this.beansRemain -= 20;\n                        this.money\
    \ += 7;\n                        this.milkRemain -= 75;\n                    \
    \    this.cups--;\n                        break;\n                    case 3:\n\
    \                        this.waterRemain -= 200;\n                        this.beansRemain\
    \ -= 12;\n                        this.milkRemain -= 100;\n                  \
    \      this.money += 6;\n                        this.cups--;\n              \
    \          break;\n                }\n                break;\n\n            case\
    \ \"fill\":\n                System.out.println(\"Write how many ml of water you\
    \ want to add:\");\n                this.waterRemain += sc.nextInt();\n      \
    \          System.out.println(\"Write how many ml of milk you want to add:\");\n\
    \                this.milkRemain += sc.nextInt();\n                System.out.println(\"\
    Write how many grams of coffee beans you want to add:\");\n                this.beansRemain\
    \ += sc.nextInt();\n                System.out.println(\"Write how many disposable\
    \ cups you want to add: \");\n                this.cups += sc.nextInt();\n   \
    \             break;\n\n            case \"take\" :\n                System.out.println(String.format(\"\
    I gave you $%d\",this.money));\n                this.money = 0;\n            \
    \    break;\n        }\n\n    }\n\n\n\n\n\n\n\n\n\n\n    public void AmountOfCoffee(){\n\
    \        int counter = -1;\n        while(true){\n            waterRemain -= this.water;\n\
    \            milkRemain -= this.milk;\n            beansRemain -= this.beans;\n\
    \            counter++;\n            if(waterRemain < 0 || milkRemain < 0 || beansRemain\
    \ < 0){\n                break;\n            }\n        }\n        maxCups = counter;\n\
    \    }\n\n    public void MaxCup(){\n        if (this.cups == maxCups){\n    \
    \        System.out.println(\"Yes, I can make that amount of coffee\");\n    \
    \    }\n        else if (this.cups > maxCups){\n            System.out.println(String.format(\"\
    No, I can make only %s cup(s) of coffee\", maxCups));\n        }\n        else\
    \ if (this.cups < maxCups){\n            System.out.println(String.format(\"Yes,\
    \ I can make that amount of coffee (and even %s more than that)\", maxCups - this.cups));\n\
    \        }\n    }\n\n    public void Ingredient(){\n        System.out.println(String.format(\"\
    For %d cups of coffee you will need:\", this.cups));\n        System.out.println(String.format(\"\
    %d ml of water\", this.cups * 200));\n        System.out.println(String.format(\"\
    %d ml of milk\", this.cups * 50));\n        System.out.println(String.format(\"\
    %d g of coffee beans\", this.cups * 15));\n    }\n\n\n}\n\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 5
